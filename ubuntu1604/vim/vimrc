" setting
set fenc=utf-8
set nobackup
set noswapfile
set autoread
set hidden
set showcmd

set number
set cursorline
" set cursorcolumn
set virtualedit=onemore
set smartindent
set visualbell
set showmatch
set laststatus=2
set wildmode=list:longest
" nnoremap j gj
" nnoremap k gk

" set list listchars=tab:\|\_
set tabstop=4
set expandtab
set softtabstop=0
set shiftwidth=4

set ignorecase
set smartcase
set incsearch
set wrapscan
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR><Esc>

let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
colorscheme hybrid
syntax on
set background=dark
set t_Co=256

" disable visual beep
set vb t_vb=

"cannot use it with neocomplete, use instead 'ConradIrwin/vim-bracketed-paste'
"set paste

" with pyenv
let $PATH = "~/.pyenv/shims:".$PATH

" neobundle configuration
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'flazz/vim-colorschemes'
" NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'ervandew/supertab'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'simeji/winresizer'
NeoBundle 'ConradIrwin/vim-bracketed-paste'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'kannokanno/previm'
NeoBundle 'SingleCompile'
" NeoBundle 'python-mode/python-mode'
NeoBundle "scrooloose/syntastic", {
      \ "build": {
      \   "mac": ["pip install flake8", "npm -g install coffeelint"],
      \   "unix": ["pip install flake8", "npm -g install coffeelint"],
      \ }}
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config={'*': {'split': ''}}
let g:quickrun_config._={ 'runner':'vimproc',
\       "runner/vimproc/updatetime" : 10,
\       "outputter/buffer/close_on_empty" : 1,
\ }

" You can specify revision/branch/tag.
NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
NeoBundle 'soramugi/auto-ctags.vim'

" autoformat
NeoBundle 'Chiel92/vim-autoformat'


" Do not load vim-pyenv until *.py is opened and
" make sure that it is loaded after jedi-vim is loaded.
NeoBundleLazy 'lambdalisue/vim-pyenv', {
        \ 'depends': ['davidhalter/jedi-vim'],
        \ 'autoload': {
        \   'filetypes': ['python', 'python3'],
        \ }}

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck


" NeoComplete
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"

" workaround for delete all input words
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"


""" COMPLETION """
" Enable jedi completion
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
""""""""""""""""""


" [ TAGLIST ]
nnoremap ;v :TlistToggle<CR> <C-w>w<CR>
nnoremap <silent><C-v> :TlistToggle<CR> <C-w>w<CR>
let Tlist_WinWidth = 40
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Display_Tag_Scope = 1
let Tlist_Use_Right_Window = 1

" close if only window
let Tlist_Exit_OnlyWindow = 1

" autostart with specific filetype
" python
" autocmd Filetype python autocmd vimenter * TlistOpen
" autocmd Filetype python autocmd vimenter * wincmd p


" [ NERDTREE ]
let g:NERDTreeWinSize = 23
" let g:NERDTreeWinPos = "right"
nnoremap <silent><C-c> :NERDTreeToggle<CR>
nnoremap ;c :NERDTreeToggle<CR>

" always left
let g:NERDTreeWinPos = "left"

" autostart
autocmd vimenter * NERDTree
" autocmd tabenter * NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" close if editor is closed
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" always open tab instead of buffer
" let g:NERDTreeMapOpenInTab='<ENTER>'

nnoremap <silent><C-x> :TlistToggle<CR> :NERDTreeToggle<CR>

" [ vim-indent-guides ]
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

" [ PreVim ]
autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
let g:previm_open_cmd = ''
nnoremap <silent><C-b> :<C-u>PrevimOpen<CR>

" set number
function Setnumber()
  if &number
    setlocal nonumber
  else
    setlocal number
  endif
endfunction
nnoremap <silent> <C-m> :call Setnumber()<CR>


" Last Position Settings
"   move to right x 2
autocmd VimEnter * wincmd l
autocmd VimEnter * wincmd l


" search without escape
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" delete any keys with backspace
set backspace=indent,eol,start

" show special keys and beutiful code
" set list
" disable
set nolist
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲

" set center for hit search
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" save sudo with w!!
cmap w!! w !sudo tee > /dev/null %


nmap <F9> :SCCompile<cr>
nmap <F10> :SCCompileRun<cr>

" move/create window shortcut
nnoremap ; <Nop>
" move window prev/next
nnoremap ;, <C-w>p
nnoremap ;. <C-w>w
" split vertical
nnoremap ;i :<C-u>vs<CR>
" split horizontail
nnoremap ;o :<C-u>sp<CR>
" move tab prev/next
nnoremap ;l gt
nnoremap ;h gT

" vimgrep
"   search :vim XXX file|%
nnoremap ;g :vimgrep 
" enable quickfix hook
"   :vimgrep XXX file | cw
autocmd QuickFixCmdPost *grep* cwindow

" nnoremap ;, <C-]><CR>
  " tag search
  " next
nnoremap ;f <C-]>:ts<CR>
  " before
nnoremap ;d <C-t>

" " python-mode for pydoc help, :help pymode
" let g:pymode_doc_bind = 'K'
" let g:pymode_folding = 0

" disable for slow completion for jedi-vim
let g:pymode_rope = 0

" supertab is reverse.. set normal
let g:SuperTabDefaultCompletionType = "<c-n>"

let g:jedi#use_splits_not_buffers = 1
let g:jedi#auto_close_doc = 0

" auto ctags as hidden file
let g:auto_ctags = 1
let g:auto_ctags_tags_name = '.tags'

" tell vim where is the tags
set tags=./tags;,tags;./.tags;,.tags;

" vim-autoformat
noremap <F3> :Autoformat<CR>
let g:formatter_yapf_style = 'pep8'
let g:autoformat_verbosemode=1
